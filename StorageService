using Azure.Identity;
using Azure.Storage.Blobs;
using Microsoft.Extensions.Logging;
using SPS.AzureFunction.Model;
using SPS.AzureFunction.Service;
using System;
using System.IO;
using System.Threading.Tasks;
namespace AzureCodeSample.Service
{
    public class StorageService
    {
        //Client generated by connectionString
        public BlobContainerClient containerClientConStr = new BlobServiceClient(Environment.GetEnvironmentVariable("connectionString")).GetBlobContainerClient("containerName");
        ////Client generated by managed identity
        public BlobContainerClient containerClient = new BlobContainerClient(new Uri(string.Format(
            "https://{0}.blob.core.windows.net/{1}",
            Environment.GetEnvironmentVariable("BlobAccountName"),
            Environment.GetEnvironmentVariable("ContainerName"))
            ),new DefaultAzureCredential()
        );

        public async Task<byte[]> GetFileByPath(string path, ILogger logger)
        {
            try
            {
                var res = await containerClient.GetBlobClient(path).DownloadContentAsync();

                if (res != null && res.GetRawResponse().Status == 200)
                {
                    return res.Value.Content.ToArray();
                }
                else
                {
                    logger.LogInformation($"path: {path}, get file failed");
                    return null;
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation(ex.Message);
                throw;
            }

        }

        public async Task<string> uploadFiletoStorage(string path, Stream stm, ILogger logger)
        {
            try
            {
                var blobClient = containerClient.GetBlobClient(path);
                {
                    await blobClient.UploadAsync(stm, true);
                    return string.IsNullOrEmpty(blobClient.Uri.AbsoluteUri) ? "" : blobClient.Uri.AbsoluteUri;
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"Error occured..{ex.message}");
                throw;
            }
        }


        public async Task<bool> WriteContentToStorage(string path, string content, ILogger logger)
        {
            try
            {
                byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(content);
                using (MemoryStream stream = new MemoryStream(byteArray))
                {
                    var blobClient = containerClient.GetBlobClient(path + ".json");
                    await blobClient.UploadAsync(stream, true);
                }
                return true;
            }
            catch (Exception ex)
            {
                logger.LogInformation($"Erroe occured {ex.Message}");
                return false;
            }
        }

        public async Task<ResponseValue> DeleteFile(string url, ILogger logger)
        {
            try
            {
              var deleteResult = await containerClient.DeleteBlobIfExistsAsync(url);
              return deleteResult.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
    }
}
