using Azure.Identity;
using Azure.Storage.Blobs;
using Microsoft.Extensions.Logging;
using SPS.AzureFunction.Model;
using SPS.AzureFunction.Service;
using System;
using System.IO;
using System.Threading.Tasks;
namespace AzureCodeSample.Service
{
    public class StorageService
    {
        //Client generated by connectionString
        public BlobContainerClient containerClientConStr = new BlobServiceClient(Environment.GetEnvironmentVariable("connectionString")).GetBlobContainerClient("containerName");
        ////Client generated by managed identity
        public BlobContainerClient containerClient = new BlobContainerClient(new Uri(string.Format(
            "https://{0}.blob.core.windows.net/{1}",
            Environment.GetEnvironmentVariable("BlobAccountName"),
            Environment.GetEnvironmentVariable("ContainerName"))
            ),new DefaultAzureCredential()
        );
//method1 get file 
        public async Task<byte[]> GetFileByPath(string path, ILogger logger)
        {
            try
            {
                var res = await containerClient.GetBlobClient(path).DownloadContentAsync();

                if (res != null && res.GetRawResponse().Status == 200)
                {
                    return res.Value.Content.ToArray();
                }
                else
                {
                    logger.LogInformation($"path: {path}, get file failed");
                    return null;
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation(ex.Message);
                throw;
            }
        }
//method2 get file 
        public async Task<Stream> GetFileByPath(string fileName,string containerName, ILogger logger)
        {
            try
            {
                CloudBlobContainer container = blobClient.GetContainerReference(containerName);
                CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);
                MemoryStream memoryStream = new MemoryStream();
                    await blockBlob.DownloadToStreamAsync(memoryStream);
                    memoryStream.Seek(0, SeekOrigin.Begin);
                    return memoryStream;
            }
            catch (Exception ex)
            {
                logger.LogInformation(ex.Message);
                throw;
            }
        }

        public async Task<string> uploadFiletoStorage(string path, Stream stm, ILogger logger)
        {
            try
            {
                var blobClient = containerClient.GetBlobClient(path);
                {
                    await blobClient.UploadAsync(stm, true);
                    return string.IsNullOrEmpty(blobClient.Uri.AbsoluteUri) ? "" : blobClient.Uri.AbsoluteUri;
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"Error occured..{ex.message}");
                throw;
            }
        }

//write byte[] content to storage
        public async Task<bool> WriteContentToStorage(string path, string content, ILogger logger)
        {
            try
            {
                byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(content);
                using (MemoryStream stream = new MemoryStream(byteArray))
                {
                    var blobClient = containerClient.GetBlobClient(path + ".json");
                    await blobClient.UploadAsync(stream, true);
                }
                return true;
            }
            catch (Exception ex)
            {
                logger.LogInformation($"Erroe occured {ex.Message}");
                return false;
            }
        }
// write string content to Storage
        public void WriteBlob(string content,string filename)
        {
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(Environment.GetEnvironmentVariable("connectionString"));
            CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();
            CloudBlobContainer outputContainer = blobClient.GetContainerReference("mycontainer");
            CloudBlockBlob outputBlobReference = outputContainer.GetBlockBlobReference($"{filename}.txt");
            outputBlobReference.UploadTextAsync(content);
        }

        public async Task<ResponseValue> DeleteFile(string url, ILogger logger)
        {
            try
            {
              var deleteResult = await containerClient.DeleteBlobIfExistsAsync(url);
              return deleteResult.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
//search file by keyword
        public async Task<string> GetFileName(string fileNameKeyWord,string containerName)
        {
            CloudBlobContainer container = blobClient.GetContainerReference(containerName);
            BlobContinuationToken token = null;
            var  fileName="";
            do
            {
                var files = await container.ListBlobsSegmentedAsync(null, token);
                foreach (var blobItem in files.Results)
                {
                    if (blobItem is CloudBlob cloudBlob)
                    {
                        if (cloudBlob.Name.Contains(fileNameKeyWord))
                        {
                            fileName= cloudBlob.Name;
                        }
                    }
                }
                token = files.ContinuationToken;
            } while (token != null);
            return fileName;
        }
    }
}
